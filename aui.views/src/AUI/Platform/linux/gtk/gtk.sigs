// signatures to dynamically use functions
// aui.toolbox: #include <dlfcn.h>
// aui.toolbox: #include <gio/gio.h>
// aui.toolbox: #include <AUI/Platform/linux/gtk/gtk_types.h>
// aui.toolbox: #include <AUI/Platform/linux/gtk/gtk_functions.h>
// aui.toolbox: namespace aui::gtk4_fake {
// aui.toolbox: void* handle = nullptr;

GtkSettings* gtk_settings_get_default(void);
void gtk_widget_path_iter_set_object_name(GtkWidgetPath* path, gint pos, const gchar* name);
void gtk_widget_path_iter_add_class(GtkWidgetPath* path, gint pos, const gchar* name);
GtkWidgetPath* gtk_widget_path_copy(const GtkWidgetPath* path);
GtkWidgetPath* gtk_widget_path_new(void);
const GtkWidgetPath* gtk_style_context_get_path(GtkStyleContext* context);
gint gtk_widget_path_append_type(GtkWidgetPath* path, GType type);
void gtk_widget_path_iter_set_name(GtkWidgetPath* path, gint pos, const gchar* name);
void gtk_widget_path_iter_set_state(GtkWidgetPath* path, gint pos, GtkStateFlags state);
GtkStyleContext* gtk_style_context_new(void);
void gtk_style_context_set_path(GtkStyleContext* context, GtkWidgetPath* path);
void gtk_style_context_set_parent(GtkStyleContext* context, GtkStyleContext* parent);
void gtk_widget_path_unref(GtkWidgetPath* path);
GtkStyleContext* gtk_style_context_get_parent(GtkStyleContext* context);
void gtk_widget_set_css_classes(GtkWidget* widget, const char** classes);
void gtk_widget_measure(GtkWidget* widget, GtkOrientation orientation, int for_size, int* minimum, int* natural, int* minimum_baseline, int* natural_baseline);
GtkWidget* gtk_offscreen_window_new(void);
void gtk_container_add(GtkContainer* container, GtkWidget* widget);
void gtk_widget_destroy(GtkWidget* widget);
gboolean gtk_bindings_activate_event(GObject* object, GdkEventKey* event);
void gtk_widget_set_events(GtkWidget* widget, gint events);
GType gtk_container_get_type(void);
cairo_surface_t* gtk_icon_info_load_surface(GtkIconInfo* icon_info, GdkWindow* for_window, GError** error);
void gtk_style_context_get_valist(GtkStyleContext* context, GtkStateFlags state, va_list args);
void gtk_style_context_get_style_valist(GtkStyleContext* context, va_list args);
GtkSnapshot* gtk_snapshot_new(void);
void gtk_snapshot_save(GtkSnapshot* snapshot);
void gtk_snapshot_restore(GtkSnapshot* snapshot);
void gtk_snapshot_scale(GtkSnapshot* snapshot, float factor_x, float factor_y);
void gtk_snapshot_append_scaled_texture(GtkSnapshot* snapshot, GdkTexture* texture, GskScalingFilter filter, const graphene_rect_t* bounds);
GskRenderNode* gtk_snapshot_free_to_node(GtkSnapshot* snapshot);
void gtk_im_context_set_client_widget(GtkIMContext* context, GtkWidget* widget);
GtkNative* gtk_widget_get_native(GtkWidget* widget);
int gtk_widget_get_width(GtkWidget* widget);
int gtk_widget_get_height(GtkWidget* widget);
GdkSurface* gtk_native_get_surface(GtkNative* native);
gboolean gtk_im_context_filter_key(GtkIMContext* context, gboolean press, GdkSurface* surface, GdkDevice* device, guint32 time, guint keycode, GdkModifierType state, int group);
void gtk_im_context_set_client_window(GtkIMContext* context, GdkWindow* window);
gboolean gtk_widget_hide_on_delete(GtkWidget* widget);
void gtk_widget_show_all(GtkWidget* widget);
void gtk_window_set_hide_on_close(GtkWindow* window, gboolean setting);
void gtk_window_set_child(GtkWindow* window, GtkWidget* child);
GtkIconInfo* gtk_icon_theme_lookup_icon_for_scale(GtkIconTheme* icon_theme, const gchar* icon_name, gint size, gint scale, GtkIconLookupFlags flags);
GdkPixbuf* gtk_icon_info_load_symbolic_for_context(GtkIconInfo* icon_info, GtkStyleContext* context, gboolean* was_symbolic, GError** error);
void gtk_snapshot_render_background(GtkSnapshot* snapshot, GtkStyleContext* context, double x, double y, double width, double height);
GType gtk_menu_get_type(void);
GType gtk_menu_bar_get_type(void);
GType gtk_menu_item_get_type(void);
void gtk_style_context_add_provider_for_screen(GdkScreen* screen, GtkStyleProvider* provider, guint priority);
void gtk_style_context_add_provider_for_display(GdkDisplay* display, GtkStyleProvider* provider, guint priority);
void gtk_style_context_remove_provider_for_screen(GdkScreen* screen, GtkStyleProvider* provider);
void gtk_style_context_remove_provider_for_display(GdkDisplay* display, GtkStyleProvider* provider);
void gtk_window_destroy(GtkWindow* window);
GtkIconTheme* gtk_icon_theme_get_for_display(GdkDisplay* display);
GtkIconTheme* gtk_icon_theme_get_default(void);
gboolean gtk_widget_path_iter_has_class(const GtkWidgetPath* path, gint pos, const gchar* name);
GdkWindow* gtk_widget_get_window(GtkWidget* widget);
void gtk_main_do_event(GdkEvent* event);
guint gtk_get_major_version(void);
guint gtk_get_minor_version(void);
guint gtk_get_micro_version(void);
void gtk_window_present(GtkWindow* window);
void gtk_window_present_with_time(GtkWindow* window, guint32 timestamp);
GType gtk_box_get_type(void);
GType gtk_button_get_type(void);
GType gtk_cell_view_get_type(void);
GType gtk_combo_box_text_get_type(void);
GType gtk_entry_get_type(void);
GType gtk_frame_get_type(void);
GType gtk_header_bar_get_type(void);
GType gtk_image_get_type(void);
GType gtk_info_bar_get_type(void);
GType gtk_label_get_type(void);
GType gtk_print_unix_dialog_get_type(void);
GType gtk_range_get_type(void);
GType gtk_scale_get_type(void);
GType gtk_scrollbar_get_type(void);
GType gtk_scrolled_window_get_type(void);
GType gtk_separator_get_type(void);
GType gtk_spinner_get_type(void);
GType gtk_style_provider_get_type(void);
GType gtk_text_view_get_type(void);
GType gtk_toggle_button_get_type(void);
GType gtk_tree_model_get_type(void);
GType gtk_tree_view_get_type(void);
GType gtk_widget_get_type(void);
GType gtk_window_get_type(void);
void gtk_box_set_spacing(GtkBox* box, int spacing);
void gtk_box_append(GtkBox* box, GtkWidget* child);
void gtk_widget_set_vexpand(GtkWidget* widget, gboolean expand);
void gtk_widget_set_hexpand(GtkWidget* widget, gboolean expand);
GtkWidget* gtk_combo_box_new_with_model(GtkTreeModel* model);
GtkCssProvider* gtk_css_provider_new(void);
void gtk_disable_setlocale(void);
void gtk_enumerate_printers(GtkPrinterFunc func, gpointer data, GDestroyNotify destroy, gboolean wait);
GList* gtk_print_backend_load_modules(void);
GListModel* gtk_print_backend_get_printers(GtkPrintBackend* print_backend);
GList* gtk_print_backend_get_printer_list(GtkPrintBackend* print_backend);
GtkPrinter* gtk_print_backend_find_printer(GtkPrintBackend* print_backend, const char* printer_name);
void gtk_file_filter_add_mime_type(GtkFileFilter* filter, const gchar* mime_type);
void gtk_file_filter_add_pattern(GtkFileFilter* filter, const gchar* pattern);
GtkFileFilter* gtk_file_filter_new(void);
void gtk_file_filter_set_name(GtkFileFilter* filter, const gchar* name);
GtkWidget* gtk_image_new(void);
void gtk_image_set_from_pixbuf(GtkImage* image, GdkPixbuf* pixbuf);
void gtk_im_context_focus_in(GtkIMContext* context);
void gtk_im_context_focus_out(GtkIMContext* context);
void gtk_im_context_get_preedit_string(GtkIMContext* context, gchar** str, PangoAttrList** attrs, gint* cursor_pos);
void gtk_im_context_reset(GtkIMContext* context);
void gtk_im_context_set_cursor_location(GtkIMContext* context, const GdkRectangle* area);
GtkIMContext* gtk_im_context_simple_new(void);
GtkIMContext* gtk_im_multicontext_new(void);
const char* gtk_im_multicontext_get_context_id(GtkIMMulticontext* context);
void gtk_im_multicontext_set_context_id(GtkIMMulticontext* context, const char* context_id);
GType gtk_im_multicontext_get_type(void);
GtkWidget* gtk_label_new(const gchar* str);
gdouble gtk_page_setup_get_left_margin(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_page_height(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_page_width(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_paper_height(GtkPageSetup* setup, GtkUnit unit);
GtkPaperSize* gtk_page_setup_get_paper_size(GtkPageSetup* setup);
gdouble gtk_page_setup_get_paper_width(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_top_margin(GtkPageSetup* setup, GtkUnit unit);
gboolean gtk_page_setup_load_key_file(GtkPageSetup* setup, GKeyFile* key_file, const char* group_name, GError** error);
GtkPageSetup* gtk_page_setup_new(void);
void gtk_page_setup_set_paper_size(GtkPageSetup* setup, GtkPaperSize* size);
void gtk_page_setup_to_key_file(GtkPageSetup* setup, GKeyFile* key_file, const gchar* group_name);
void gtk_paper_size_free(GtkPaperSize* size);
gdouble gtk_paper_size_get_height(GtkPaperSize* size, GtkUnit unit);
GList* gtk_paper_size_get_paper_sizes(gboolean include_custom);
const gchar* gtk_paper_size_get_ppd_name(GtkPaperSize* size);
gdouble gtk_paper_size_get_width(GtkPaperSize* size, GtkUnit unit);
GtkPaperSize* gtk_paper_size_new_custom(const gchar* name, const gchar* display_name, gdouble width, gdouble height, GtkUnit unit);
GtkPageSetup* gtk_printer_get_default_page_size(GtkPrinter* printer);
const gchar* gtk_printer_get_name(GtkPrinter* printer);
gboolean gtk_printer_is_default(GtkPrinter* printer);
GtkPrintJob* gtk_print_job_new(const gchar* title, GtkPrinter* printer, GtkPrintSettings* settings, GtkPageSetup* page_setup);
void gtk_print_job_send(GtkPrintJob* job, GtkPrintJobCompleteFunc callback, gpointer user_data, GDestroyNotify dnotify);
gboolean gtk_print_job_set_source_file(GtkPrintJob* job, const gchar* filename, GError** error);
GtkPrintSettings* gtk_print_settings_copy(GtkPrintSettings* other);
GtkPageOrientation gtk_print_settings_get_orientation(GtkPrintSettings* settings);
GtkPageRange* gtk_print_settings_get_page_ranges(GtkPrintSettings* settings, gint *num_ranges);
const gchar* gtk_print_settings_get_printer(GtkPrintSettings* settings);
GtkPrintPages gtk_print_settings_get_print_pages(GtkPrintSettings* settings);
gint gtk_print_settings_get_resolution(GtkPrintSettings* settings);
gboolean gtk_print_settings_load_key_file(GtkPrintSettings* settings, GKeyFile* key_file, const gchar* group_name, GError** error);
GtkPrintSettings* gtk_print_settings_new(void);
void gtk_print_settings_set(GtkPrintSettings* settings, const gchar* key, const gchar* value);
void gtk_print_settings_set_collate(GtkPrintSettings* settings, gboolean collate);
void gtk_print_settings_set_n_copies(GtkPrintSettings* settings, gint num_copies);
void gtk_print_settings_set_orientation(GtkPrintSettings* settings, GtkPageOrientation orientation);
void gtk_print_settings_set_printer_lpi(GtkPrintSettings* settings, gdouble lpi);
void gtk_print_settings_set_print_pages(GtkPrintSettings* settings, GtkPrintPages pages);
void gtk_print_settings_set_resolution_xy(GtkPrintSettings* settings, gint resolution_x, gint resolution_y);
void gtk_print_settings_to_key_file(GtkPrintSettings* settings, GKeyFile* key_file, const gchar* group_name);
GtkPageSetup* gtk_print_unix_dialog_get_page_setup(GtkPrintUnixDialog* dialog);
GtkPrinter* gtk_print_unix_dialog_get_selected_printer(GtkPrintUnixDialog* dialog);
GtkPrintSettings* gtk_print_unix_dialog_get_settings(GtkPrintUnixDialog* dialog);
GtkWidget* gtk_print_unix_dialog_new(const char* title, GtkWindow* parent);
void gtk_print_unix_dialog_set_embed_page_setup(GtkPrintUnixDialog* dialog, gboolean embed);
void gtk_print_unix_dialog_set_has_selection(GtkPrintUnixDialog* dialog, gboolean has_selection);
void gtk_print_unix_dialog_set_manual_capabilities(GtkPrintUnixDialog* dialog, GtkPrintCapabilities capabilities);
void gtk_print_unix_dialog_set_settings(GtkPrintUnixDialog* dialog, GtkPrintSettings* settings);
void gtk_print_unix_dialog_set_support_selection(GtkPrintUnixDialog* dialog, gboolean support_selection);
void gtk_render_background(GtkStyleContext* context, cairo_t* cr, gdouble x, gdouble y, gdouble width, gdouble height);
void gtk_render_focus(GtkStyleContext* context, cairo_t* cr, gdouble x, gdouble y, gdouble width, gdouble height);
void gtk_render_frame(GtkStyleContext* context, cairo_t* cr, gdouble x, gdouble y, gdouble width, gdouble height);
GtkWidget* gtk_separator_new(GtkOrientation orientation);
void gtk_style_context_add_class(GtkStyleContext* context, const gchar* class_name);
void gtk_style_context_add_provider(GtkStyleContext* context, GtkStyleProvider* provider, guint priority);
GtkStateFlags gtk_style_context_get_state(GtkStyleContext* context);
gboolean gtk_style_context_has_class(GtkStyleContext* context, const gchar* class_name);
void gtk_style_context_set_scale(GtkStyleContext* context, gint scale);
void gtk_style_context_set_state(GtkStyleContext* context, GtkStateFlags flags);
PangoContext* gtk_widget_get_pango_context(GtkWidget* widget);
GtkWidget* gtk_widget_get_parent(GtkWidget* widget);
void gtk_widget_get_preferred_size(GtkWidget* widget, GtkRequisition* minimum_size, GtkRequisition* natural_size);
gint gtk_widget_get_scale_factor(GtkWidget* widget);
GtkStyleContext* gtk_widget_get_style_context(GtkWidget* widget);
void gtk_widget_hide(GtkWidget* widget);
void gtk_widget_realize(GtkWidget* widget);
void gtk_widget_set_can_focus(GtkWidget* widget, gboolean can_focus);
void gtk_widget_set_name(GtkWidget* widget, const gchar* name);
void gtk_widget_set_parent(GtkWidget* widget, GtkWidget* parent);
void gtk_widget_set_sensitive(GtkWidget* widget, gboolean sensitive);
void gtk_widget_set_size_request(GtkWidget* widget, gint width, gint height);
void gtk_widget_set_state_flags(GtkWidget* widget, GtkStateFlags flags, gboolean clear);
void gtk_widget_show(GtkWidget* widget);
void gtk_window_set_modal(GtkWindow* window, gboolean modal);
void gtk_window_set_default_size(GtkWindow* window, int width, int height);
void gtk_window_set_title(GtkWindow* window, const char* title);
int gtk_widget_get_margin_start(GtkWidget* widget);
void gtk_widget_set_margin_start(GtkWidget* widget, int margin);
int gtk_widget_get_margin_end(GtkWidget* widget);
void gtk_widget_set_margin_end(GtkWidget* widget, int margin);
int gtk_widget_get_margin_top(GtkWidget* widget);
void gtk_widget_set_margin_top(GtkWidget* widget, int margin);
int gtk_widget_get_margin_bottom(GtkWidget* widget);
void gtk_widget_set_margin_bottom(GtkWidget* widget, int margin);
GtkWidget* gtk_box_new(GtkOrientation orientation, int spacing);
void gtk_print_settings_set_printer(GtkPrintSettings* settings, const gchar* printer);
GskRenderNodeType gsk_render_node_get_node_type(GskRenderNode* node);
void gsk_render_node_unref(GskRenderNode* node);
GskRenderNode* gsk_transform_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_opacity_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_color_matrix_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_repeat_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_clip_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_rounded_clip_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_shadow_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_blur_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_debug_node_get_child(GskRenderNode* node);
GskRenderNode* gsk_container_node_get_child(GskRenderNode* node, guint idx);
GskRenderNode* gsk_gl_shader_node_get_child(GskRenderNode* node, guint idx);
guint gsk_container_node_get_n_children(GskRenderNode* node);
guint gsk_gl_shader_node_get_n_children(GskRenderNode* node);
GdkTexture* gsk_texture_node_get_texture(GskRenderNode* node);
float gsk_opacity_node_get_opacity(const GskRenderNode* node);
GskRenderNode* gsk_mask_node_get_mask(const GskRenderNode* node);
GdkTexture* gsk_texture_scale_node_get_texture(const GskRenderNode* node);
GskRenderNode* gsk_subsurface_node_get_child(const GskRenderNode* node);
gboolean gdk_keymap_translate_keyboard_state(GdkKeymap* keymap, guint hardware_keycode, GdkModifierType state, gint group, guint* keyval, gint* effective_group, gint* level, GdkModifierType* consumed_modifiers);
void gdk_keymap_add_virtual_modifiers(GdkKeymap* keymap, GdkModifierType* state);
GdkEvent* gdk_event_new(GdkEventType type);
void gdk_event_free(GdkEvent* event);
gboolean gdk_keymap_get_entries_for_keycode(GdkKeymap* keymap, guint hardware_keycode, GdkKeymapKey** keys, guint** keyvals, gint* n_entries);
GdkKeymap* gdk_keymap_get_for_display(GdkDisplay* display);
int gdk_texture_get_width(GdkTexture* texture);
int gdk_texture_get_height(GdkTexture* texture);
void gdk_texture_download(GdkTexture* texture, guchar* data, gsize stride);
gboolean gdk_display_map_keycode(GdkDisplay* display, guint keycode, GdkKeymapKey** keys, guint** keyvals, int* n_entries);
void gdk_paintable_snapshot(GdkPaintable* paintable, GdkSnapshot* snapshot, double width, double height);
GType gdk_paintable_get_type(void);
GdkSeat* gdk_display_get_default_seat(GdkDisplay* display);
GdkDevice* gdk_seat_get_keyboard(GdkSeat* seat);
GdkTexture* gdk_memory_texture_new(int width, int height, GdkMemoryFormat format, GBytes* bytes, gsize stride);
int gdk_paintable_get_intrinsic_width(GdkPaintable* paintable);
int gdk_paintable_get_intrinsic_height(GdkPaintable* paintable);
GdkScreen* gdk_screen_get_default(void);
void gdk_color_free(GdkColor* color);
gboolean gdk_wayland_window_set_transient_for_exported(GdkWindow* window, char* parent_handle_str);
gboolean gdk_wayland_toplevel_set_transient_for_exported(GdkToplevel* toplevel, const char* parent_handle_str);
unsigned long gdk_x11_surface_get_xid(GdkSurface* surface);
unsigned long gdk_x11_window_get_xid(GdkWindow* window);
void gdk_event_handler_set(GdkEventFunc func, gpointer data, GDestroyNotify notify);
GdkWindow* gdk_x11_window_foreign_new_for_display(GdkDisplay* display, unsigned long window);
GdkWindow* gdk_x11_window_lookup_for_display(GdkDisplay* display, unsigned long window);
guint gdk_key_event_get_keycode(GdkEvent* event);
guint gdk_key_event_get_keyval(GdkEvent* event);
GdkSurface* gdk_event_get_surface(GdkEvent* event);
GdkModifierType gdk_event_get_modifier_state(GdkEvent *event);
GType gdk_toplevel_get_type(void);
void gdk_set_allowed_backends(const gchar* backends);
guint32 gdk_keyval_to_unicode(guint keyval);
gdouble gdk_screen_get_resolution(GdkScreen *screen);
guint gdk_unicode_to_keyval(guint32 wc);
int gdk_display_get_n_monitors(GdkDisplay *display);
GdkMonitor* gdk_display_get_monitor(GdkDisplay *display, int monitor_num);
void gdk_monitor_get_geometry(GdkMonitor *monitor, GdkRectangle *geometry);
int gdk_monitor_get_scale_factor(GdkMonitor *monitor);
GdkMonitor* gdk_display_get_primary_monitor(GdkDisplay *display);
GListModel* gdk_display_get_monitors(GdkDisplay *self);

GtkAlertDialog* gtk_alert_dialog_new(const char* format, const char* str);
gboolean gtk_alert_dialog_get_modal(GtkAlertDialog* self);
void gtk_alert_dialog_set_modal(GtkAlertDialog* self, gboolean modal);
const char* gtk_alert_dialog_get_message(GtkAlertDialog* self);
void gtk_alert_dialog_set_buttons(GtkAlertDialog* self, const char** labels);
void gtk_alert_dialog_set_message(GtkAlertDialog* self, const char* message);
const char* gtk_alert_dialog_get_detail(GtkAlertDialog* self);
void gtk_alert_dialog_set_detail(GtkAlertDialog* self, const char* detail);
void gtk_alert_dialog_show(GtkAlertDialog* self, GtkWindow* parent);
void gtk_alert_dialog_choose(GtkAlertDialog* self, GtkWindow* parent, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

void gtk_window_set_resizable(GtkWindow* window, gboolean resizable);
gboolean gtk_window_get_resizable(GtkWindow* window);
gboolean gdk_surface_is_destroyed(GdkSurface* surface);
GtkNative* gtk_native_get_for_surface(GdkSurface* surface);
gboolean gdk_event_get_position(GdkEvent* event, double* x, double* y);
void gtk_native_get_surface_transform(GtkNative* self, double* x, double* y);
gboolean gtk_widget_compute_point(GtkWidget* widget, GtkWidget* target, const graphene_point_t* point, graphene_point_t* out_point);
GdkGLContext* gdk_gl_context_get_current();
GdkGLContext* gdk_surface_create_gl_context(GdkSurface* surface, GError** error);
GdkGLAPI gdk_gl_context_get_api(GdkGLContext* self);
void gdk_gl_context_set_allowed_apis(GdkGLContext* self, GdkGLAPI apis);
void gdk_gl_context_set_required_version(GdkGLContext* context, int major, int minor);
gboolean gdk_gl_context_realize(GdkGLContext* context, GError** error);
void gdk_gl_context_make_current(GdkGLContext* context);
void gdk_gl_context_clear_current();
double gdk_surface_get_scale(GdkSurface* surface);
void glib_autoptr_clear_GtkWidget(GtkWidget* ptr);
void glib_autoptr_clear_GtkApplication(GtkApplication* ptr);
void glib_autoptr_clear_GtkApplicationWindow(GtkApplicationWindow* ptr);
void gtk_widget_set_focusable(GtkWidget* widget, gboolean focusable);
void gtk_widget_queue_draw(GtkWidget* widget);
void gtk_init();
GtkApplication* gtk_application_new(const gchar* application_id, GApplicationFlags flags);

GType gtk_application_get_type();

GType gdk_gl_texture_get_type();
GdkGLTextureBuilder* gdk_gl_texture_builder_new();
void gdk_gl_texture_builder_set_context(GdkGLTextureBuilder* self, GdkGLContext* context);
void gdk_gl_texture_release(GdkGLTexture* self);
gpointer gdk_gl_texture_builder_get_sync(GdkGLTextureBuilder* self);
void gdk_gl_texture_builder_set_sync(GdkGLTextureBuilder* self, gpointer sync);
GdkTexture* gdk_gl_texture_builder_build(GdkGLTextureBuilder* self, GDestroyNotify destroy, gpointer data);
int gdk_gl_texture_builder_get_width(GdkGLTextureBuilder* self);
int gdk_gl_texture_builder_get_height(GdkGLTextureBuilder* self);
void gdk_gl_texture_builder_set_width(GdkGLTextureBuilder* self, int width);
void gdk_gl_texture_builder_set_height(GdkGLTextureBuilder* self, int height);
guint gdk_gl_texture_builder_get_id(GdkGLTextureBuilder* self);
void gdk_gl_texture_builder_set_format(GdkGLTextureBuilder* self, GdkMemoryFormat format);
void gdk_gl_texture_builder_set_id(GdkGLTextureBuilder* self, guint id);
void gtk_window_set_transient_for(GtkWindow* window, GtkWindow* parent);
void gtk_window_close(GtkWindow* window);
GObject* gdk_display_get_default();

GtkWidget* gtk_application_window_new(GtkApplication* application);
GType gtk_event_controller_key_get_type();
void gtk_widget_add_controller(GtkWidget* widget, GtkEventController* controller);
GtkEventController* gtk_event_controller_legacy_new();
GtkEventController* gtk_event_controller_key_new();
void gtk_event_controller_key_set_im_context(GtkEventControllerKey* controller, GtkIMContext* im_context);
GType gdk_scroll_event_get_type();
guint gdk_button_event_get_button(GdkEvent* event);
void gdk_scroll_event_get_deltas(GdkEvent* event, double* delta_x, double* delta_y);
GdkScrollUnit gdk_scroll_event_get_unit(GdkEvent* event);
GdkEventType gdk_event_get_event_type(GdkEvent* event);


// aui.toolbox: }
