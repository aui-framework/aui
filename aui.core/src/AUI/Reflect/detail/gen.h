/*
 * AUI Framework - Declarative UI toolkit for modern C++20
 * Copyright (C) 2020-2024 Alex2772 and Contributors
 *
 * SPDX-License-Identifier: MPL-2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

// based on the ideas found in boost.pfr.
// credits: Antony Polukhin, Denis Mikhailov

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////                                                                     ///////////////////////////
////////////////////////  THIS HEADER IS AUTOGENERATED WITH aui.core/misc/gen_reflection.py  ///////////////////////////
////////////////////////                                                                     ///////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <tuple>
#include <type_traits>

namespace aui::reflect::detail {

template <class... Args>
constexpr auto make_tuple_of_references(Args&&... args) noexcept {
    return std::tuple<Args&...>(args...);
}

template<typename T, typename Arg>
constexpr decltype(auto) add_cv(Arg& arg) noexcept {
    if constexpr (std::is_const<T>::value && std::is_volatile<T>::value) {
        return const_cast<const volatile Arg&>(arg);
    }
    else if constexpr (std::is_const<T>::value) {
        return const_cast<const Arg&>(arg);
    }
    else if constexpr (std::is_volatile<T>::value) {
        return const_cast<volatile Arg&>(arg);
    }
    else {
        return const_cast<Arg&>(arg);
    }
}

// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78939
template<typename T, typename Sb, typename Arg>
constexpr decltype(auto) workaround_cast(Arg& arg) noexcept {
    using output_arg_t = std::conditional_t<!std::is_reference<Sb>(), decltype(detail::add_cv<T>(arg)), Sb>;
    return const_cast<output_arg_t>(arg);
}

template<class Clazz>
constexpr auto tie_as_tuple(Clazz& /* clazz */, std::integral_constant<std::size_t, 0>) noexcept {
  return std::tuple<>{};
}

template <class Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 1>, std::enable_if_t<std::is_class< std::remove_cv_t<Clazz> >::value>* = nullptr) noexcept {
  auto& [a] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
  return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(a)>(a));
}


template <class Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 1>, std::enable_if_t<!std::is_class< std::remove_cv_t<Clazz> >::value>* = nullptr) noexcept {
  return detail::make_tuple_of_references(clazz);
}

template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 1>) noexcept {
    auto& [
    f0
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 2>) noexcept {
    auto& [
    f0, f1
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 3>) noexcept {
    auto& [
    f0, f1, f2
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 4>) noexcept {
    auto& [
    f0, f1, f2, f3
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 5>) noexcept {
    auto& [
    f0, f1, f2, f3, f4
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 6>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 7>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 8>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 9>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 10>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 11>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 12>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 13>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 14>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 15>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 16>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 17>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 18>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 19>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 20>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 21>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 22>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 23>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 24>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 25>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 26>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 27>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 28>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 29>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 30>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 31>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 32>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 33>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 34>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 35>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 36>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 37>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 38>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 39>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 40>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 41>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 42>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 43>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 44>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 45>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 46>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 47>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 48>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 49>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 50>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 51>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 52>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 53>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 54>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 55>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 56>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 57>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 58>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 59>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 60>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 61>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 62>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 63>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 64>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 65>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 66>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 67>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 68>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 69>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 70>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 71>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 72>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 73>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 74>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 75>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 76>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 77>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 78>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 79>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 80>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 81>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 82>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 83>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 84>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 85>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 86>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 87>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 88>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 89>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 90>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 91>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 92>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 93>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 94>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92), detail::workaround_cast<Clazz, decltype(f93)>(f93));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 95>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92), detail::workaround_cast<Clazz, decltype(f93)>(f93), detail::workaround_cast<Clazz, decltype(f94)>(f94));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 96>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92), detail::workaround_cast<Clazz, decltype(f93)>(f93), detail::workaround_cast<Clazz, decltype(f94)>(f94), detail::workaround_cast<Clazz, decltype(f95)>(f95));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 97>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92), detail::workaround_cast<Clazz, decltype(f93)>(f93), detail::workaround_cast<Clazz, decltype(f94)>(f94), detail::workaround_cast<Clazz, decltype(f95)>(f95), detail::workaround_cast<Clazz, decltype(f96)>(f96));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 98>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96, f97
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92), detail::workaround_cast<Clazz, decltype(f93)>(f93), detail::workaround_cast<Clazz, decltype(f94)>(f94), detail::workaround_cast<Clazz, decltype(f95)>(f95), detail::workaround_cast<Clazz, decltype(f96)>(f96), detail::workaround_cast<Clazz, decltype(f97)>(f97));
}
template<typename Clazz>
constexpr auto tie_as_tuple(Clazz& clazz, std::integral_constant<std::size_t, 99>) noexcept {
    auto& [
    f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96, f97, f98
    ] = const_cast<std::remove_cv_t<Clazz>&>(clazz); // ====================> aui::reflect: Clazz is not a SimpleAggregate.
    return detail::make_tuple_of_references(detail::workaround_cast<Clazz, decltype(f0)>(f0), detail::workaround_cast<Clazz, decltype(f1)>(f1), detail::workaround_cast<Clazz, decltype(f2)>(f2), detail::workaround_cast<Clazz, decltype(f3)>(f3), detail::workaround_cast<Clazz, decltype(f4)>(f4), detail::workaround_cast<Clazz, decltype(f5)>(f5), detail::workaround_cast<Clazz, decltype(f6)>(f6), detail::workaround_cast<Clazz, decltype(f7)>(f7), detail::workaround_cast<Clazz, decltype(f8)>(f8), detail::workaround_cast<Clazz, decltype(f9)>(f9), detail::workaround_cast<Clazz, decltype(f10)>(f10), detail::workaround_cast<Clazz, decltype(f11)>(f11), detail::workaround_cast<Clazz, decltype(f12)>(f12), detail::workaround_cast<Clazz, decltype(f13)>(f13), detail::workaround_cast<Clazz, decltype(f14)>(f14), detail::workaround_cast<Clazz, decltype(f15)>(f15), detail::workaround_cast<Clazz, decltype(f16)>(f16), detail::workaround_cast<Clazz, decltype(f17)>(f17), detail::workaround_cast<Clazz, decltype(f18)>(f18), detail::workaround_cast<Clazz, decltype(f19)>(f19), detail::workaround_cast<Clazz, decltype(f20)>(f20), detail::workaround_cast<Clazz, decltype(f21)>(f21), detail::workaround_cast<Clazz, decltype(f22)>(f22), detail::workaround_cast<Clazz, decltype(f23)>(f23), detail::workaround_cast<Clazz, decltype(f24)>(f24), detail::workaround_cast<Clazz, decltype(f25)>(f25), detail::workaround_cast<Clazz, decltype(f26)>(f26), detail::workaround_cast<Clazz, decltype(f27)>(f27), detail::workaround_cast<Clazz, decltype(f28)>(f28), detail::workaround_cast<Clazz, decltype(f29)>(f29), detail::workaround_cast<Clazz, decltype(f30)>(f30), detail::workaround_cast<Clazz, decltype(f31)>(f31), detail::workaround_cast<Clazz, decltype(f32)>(f32), detail::workaround_cast<Clazz, decltype(f33)>(f33), detail::workaround_cast<Clazz, decltype(f34)>(f34), detail::workaround_cast<Clazz, decltype(f35)>(f35), detail::workaround_cast<Clazz, decltype(f36)>(f36), detail::workaround_cast<Clazz, decltype(f37)>(f37), detail::workaround_cast<Clazz, decltype(f38)>(f38), detail::workaround_cast<Clazz, decltype(f39)>(f39), detail::workaround_cast<Clazz, decltype(f40)>(f40), detail::workaround_cast<Clazz, decltype(f41)>(f41), detail::workaround_cast<Clazz, decltype(f42)>(f42), detail::workaround_cast<Clazz, decltype(f43)>(f43), detail::workaround_cast<Clazz, decltype(f44)>(f44), detail::workaround_cast<Clazz, decltype(f45)>(f45), detail::workaround_cast<Clazz, decltype(f46)>(f46), detail::workaround_cast<Clazz, decltype(f47)>(f47), detail::workaround_cast<Clazz, decltype(f48)>(f48), detail::workaround_cast<Clazz, decltype(f49)>(f49), detail::workaround_cast<Clazz, decltype(f50)>(f50), detail::workaround_cast<Clazz, decltype(f51)>(f51), detail::workaround_cast<Clazz, decltype(f52)>(f52), detail::workaround_cast<Clazz, decltype(f53)>(f53), detail::workaround_cast<Clazz, decltype(f54)>(f54), detail::workaround_cast<Clazz, decltype(f55)>(f55), detail::workaround_cast<Clazz, decltype(f56)>(f56), detail::workaround_cast<Clazz, decltype(f57)>(f57), detail::workaround_cast<Clazz, decltype(f58)>(f58), detail::workaround_cast<Clazz, decltype(f59)>(f59), detail::workaround_cast<Clazz, decltype(f60)>(f60), detail::workaround_cast<Clazz, decltype(f61)>(f61), detail::workaround_cast<Clazz, decltype(f62)>(f62), detail::workaround_cast<Clazz, decltype(f63)>(f63), detail::workaround_cast<Clazz, decltype(f64)>(f64), detail::workaround_cast<Clazz, decltype(f65)>(f65), detail::workaround_cast<Clazz, decltype(f66)>(f66), detail::workaround_cast<Clazz, decltype(f67)>(f67), detail::workaround_cast<Clazz, decltype(f68)>(f68), detail::workaround_cast<Clazz, decltype(f69)>(f69), detail::workaround_cast<Clazz, decltype(f70)>(f70), detail::workaround_cast<Clazz, decltype(f71)>(f71), detail::workaround_cast<Clazz, decltype(f72)>(f72), detail::workaround_cast<Clazz, decltype(f73)>(f73), detail::workaround_cast<Clazz, decltype(f74)>(f74), detail::workaround_cast<Clazz, decltype(f75)>(f75), detail::workaround_cast<Clazz, decltype(f76)>(f76), detail::workaround_cast<Clazz, decltype(f77)>(f77), detail::workaround_cast<Clazz, decltype(f78)>(f78), detail::workaround_cast<Clazz, decltype(f79)>(f79), detail::workaround_cast<Clazz, decltype(f80)>(f80), detail::workaround_cast<Clazz, decltype(f81)>(f81), detail::workaround_cast<Clazz, decltype(f82)>(f82), detail::workaround_cast<Clazz, decltype(f83)>(f83), detail::workaround_cast<Clazz, decltype(f84)>(f84), detail::workaround_cast<Clazz, decltype(f85)>(f85), detail::workaround_cast<Clazz, decltype(f86)>(f86), detail::workaround_cast<Clazz, decltype(f87)>(f87), detail::workaround_cast<Clazz, decltype(f88)>(f88), detail::workaround_cast<Clazz, decltype(f89)>(f89), detail::workaround_cast<Clazz, decltype(f90)>(f90), detail::workaround_cast<Clazz, decltype(f91)>(f91), detail::workaround_cast<Clazz, decltype(f92)>(f92), detail::workaround_cast<Clazz, decltype(f93)>(f93), detail::workaround_cast<Clazz, decltype(f94)>(f94), detail::workaround_cast<Clazz, decltype(f95)>(f95), detail::workaround_cast<Clazz, decltype(f96)>(f96), detail::workaround_cast<Clazz, decltype(f97)>(f97), detail::workaround_cast<Clazz, decltype(f98)>(f98));
}

template <class Clazz, std::size_t I>
constexpr void tie_as_tuple(Clazz& /* clazz */, std::integral_constant<std::size_t, I>) noexcept {
  static_assert(sizeof(Clazz) && false,
                "====================> aui::reflect: too many fields in a structure Clazz. Please regenerate aui.core/src/AUI/Reflect/detail/gen.h for an appropriate count of fields.");
}

} // namespace aui::reflect::detail
