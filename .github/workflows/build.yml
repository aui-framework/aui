name: build

on:
  push:
    branches:
      - master
      - develop
    tags:
      - v*
  pull_request:
    branches: [ master, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  GIT_SUBMODULE_STRATEGY: recursive

jobs:
  # build-android:
  #  name: "Android"
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        submodules: true
  #    - uses: actions/setup-java@v1
  #      with: { java-version: '11' }

  #    - name: Install ubuntu packages
  #      run: sudo apt-get update && sudo apt-get install build-essential cmake ninja-build

  #    - name: Gradle build
  #      working-directory: examples/AUI.Example.Views/android
  #      run: ./gradlew assembleDebug

  build-desktop:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC x86 shared", artifact: "aui_windows-msvc-x86-shared.tar.xz",
            os: windows-latest,
            build_type: "Release", generator: "Visual Studio 16 2019", additional_cmake_flags: "-A Win32"
          }
          - {
            name: "Windows Latest MSVC x86_64 shared", artifact: "aui_windows-msvc-x86_64-shared.tar.xz",
            os: windows-latest,
            build_type: "Release", generator: "Visual Studio 16 2019", additional_cmake_flags: "-A x64"
          }
          - {
            name: "Windows Latest MSVC x86 static", artifact: "aui_windows-msvc-x86-static.tar.xz",
            os: windows-latest,
            build_type: "Release", generator: "Visual Studio 16 2019", additional_cmake_flags: "-A Win32 -DBUILD_SHARED_LIBS=OFF"
          }
          - {
            name: "Windows Latest MSVC x86_64 static", artifact: "aui_windows-msvc-x86_64-static.tar.xz",
            os: windows-latest,
            build_type: "Release", generator: "Visual Studio 16 2019", additional_cmake_flags: "-A x64 -DBUILD_SHARED_LIBS=OFF"
          }

          - {
            name: "Ubuntu Latest GCC shared", artifact: "aui_ubuntu-x86_64-shared.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", generator: "Unix Makefiles", additional_cmake_flags: ""
          }
          - {
            name: "Ubuntu Latest GCC static", artifact: "aui_ubuntu-x86_64-static.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", generator: "Unix Makefiles", additional_cmake_flags: "-DBUILD_SHARED_LIBS=OFF"
          }

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Linux dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install pkg-config libglew-dev zlib1g-dev libssl-dev libcrypt-dev libcurl4-openssl-dev libgtk-3-dev libfontconfig-dev
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -G "${{ matrix.config.generator }}" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} ${{matrix.config.additional_cmake_flags}}

      - name: Build project
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.config.build_type}}

      - name: Build tests
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.config.build_type}} --target Tests

      - name: Test
        # Build your program with the given configuration
        run: cd ${{github.workspace}}/build && ctest .  -C ${{matrix.config.build_type}} --output-on-failure

      - name: Install Strip
        run: cmake --install build --prefix instdir --strip

      - name: Pack
        working-directory: instdir
        run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build-desktop

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC x86", artifact: "aui_windows-msvc-x86.tar.xz",
            os: windows-latest
          }
          - {
            name: "Windows Latest MSVC x86_64", artifact: "aui_windows-msvc-x86_64.tar.xz",
            os: windows-latest
          }
          - {
            name: "Ubuntu Latest GCC", artifact: "aui_ubuntu-x86_64.tar.xz",
            os: ubuntu-latest
          }
    needs: release
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.config.artifact }}
          path: ./

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: application/x-gtar