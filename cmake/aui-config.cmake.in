# ======================================================================================================================
# 20
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Original code located at https://github.com/aui-framework/aui
# ======================================================================================================================

# AUI configuration file

get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

include_directories(${SELF_DIR}/include)

set(AUI_BUILD_AUI_ROOT ${SELF_DIR} CACHE PATH "")
include(${SELF_DIR}/cmake/aui.build.cmake)


@AUI_CONFIG_VARS@


if (NOT AUI_FIND_COMPONENTS) # case fix
    set(AUI_FIND_COMPONENTS ${aui_FIND_COMPONENTS})
endif()

if (NOT AUI_FIND_COMPONENTS)
    set(AUI_FIND_COMPONENTS ${AUI_AVAILABLE_COMPONENTS})
    set(_all TRUE)
else()
    # add dependencies
    if (views IN_LIST AUI_FIND_COMPONENTS)
        list(APPEND AUI_FIND_COMPONENTS xml image)
    endif()
    list(REMOVE_DUPLICATES AUI_FIND_COMPONENTS)
endif()

foreach(_entry ${AUI_BOOT_ROOT_ENTRIES})
    string(REPLACE "=" ";" _entry ${_entry})
    list(GET _entry 0 VAR_NAME)
    list(GET _entry 1 VAR_VALUE)
    message("Forwarded ${VAR_NAME} with ${VAR_VALUE}")
    set(${VAR_NAME} ${VAR_VALUE})
    set(${VAR_NAME} ${VAR_VALUE} PARENT_SCOPE)

    # import required targets

    # remove the _ROOT suffix
    string(LENGTH ${VAR_NAME} _len)
    math(EXPR _len "${_len}-5")
    string(SUBSTRING ${VAR_NAME} 0 ${_len} MODULE_NAME)

    # some targets can be found using the config mode only or the module mode only; the point is to try the both ways
    set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)
    find_package(${MODULE_NAME})
    if (NOT ${MODULE_NAME}_FOUND)
        set(CMAKE_FIND_PACKAGE_PREFER_CONFIG FALSE)
        find_package(${MODULE_NAME} REQUIRED)
    endif()
endforeach()

set(AUI_FOUND TRUE)
foreach(_module ${AUI_FIND_COMPONENTS})
    if (_module STREQUAL "toolbox")
        # ignore it
        set(AUI_toolbox_FOUND TRUE)
        continue()
    endif()

    set(_module_target_name aui::${_module})
    if (TARGET ${_module_target_name})
        continue()
    endif()
    if (NOT ${_module} IN_LIST AUI_ALL_COMPONENTS)
        message(FATAL_ERROR "Unknown component ${_module}")
    endif()
    if (_module STREQUAL toolbox)
        continue()
    endif()
    if (${_module} IN_LIST AUI_AVAILABLE_COMPONENTS)
        set(_module_dir "${SELF_DIR}/aui.${_module}")
        if (EXISTS ${_module_dir})
            set(_user_install_dir "${CMAKE_CURRENT_BINARY_DIR}/lib")
            set(AUI_${_module}_FOUND TRUE)
            if (WIN32)
                find_file(AUI_${_module}_LIBRARY
                          NAMES "aui.${_module}.dll" "libaui.${_module}.dll"
                          PATHS "${SELF_DIR}/aui.${_module}/bin"
                          NO_DEFAULT_PATH
                          NO_CACHE)
                find_library(AUI_${_module}_IMPLIBRARY "aui.${_module}"
                             PATHS "${SELF_DIR}/aui.${_module}/lib"
                             NO_DEFAULT_PATH
                             NO_CACHE)
            else()
                find_library(AUI_${_module}_LIBRARY "aui.${_module}"
                             PATHS ${_user_install_dir} "${SELF_DIR}/aui.${_module}/lib"
                             NO_DEFAULT_PATH
                             NO_CACHE)
            endif()
            set(_lib ${AUI_${_module}_LIBRARY})
            set(_implib ${AUI_${_module}_IMPLIBRARY})
            set(_include ${SELF_DIR}/aui.${_module}/include)
            if ((_lib OR _implib) AND EXISTS ${_include})
                if (NOT _lib)
                    set(_lib ${_implib})
                endif()
                list(APPEND AUI_LIBRARIES ${_lib})
                list(APPEND AUI_INCLUDE_DIRS ${_include})
                list(APPEND AUI_IMPORTED_TARGETS "${_module_target_name}")
                add_library(${_module_target_name} SHARED IMPORTED)
                target_link_libraries(${_module_target_name} INTERFACE ${AUI_COMPONENT_${_module}_LINK_LIBS})
                target_link_options(${_module_target_name} INTERFACE ${AUI_COMPONENT_${_module}_LINK_OPTIONS})
                set_target_properties(${_module_target_name} PROPERTIES
                        IMPORTED_LOCATION "${_lib}"
                        IMPORTED_IMPLIB "${AUI_${_module}_IMPLIBRARY}"
                        INTERFACE_INCLUDE_DIRECTORIES "${_include}"
                        INTERFACE_LINK_DIRECTORIES "${SELF_DIR}/aui.${_module}/lib")

                target_compile_definitions(${_module_target_name} INTERFACE ${AUI_COMPONENT_${_module}_COMPILE_DEFINITIONS})
                if (AUI_COMPONENT_${_module}_WHOLEARCHIVE)
                    set_target_properties(${_module_target_name} PROPERTIES INTERFACE_AUI_WHOLEARCHIVE ON)
                endif()
                continue()
            endif()
        endif()
    endif()

    set(AUI_${_module}_FOUND FALSE)
    if (NOT _all)
        set(AUI_FOUND FALSE)
        if (AUI_FIND_REQUIRED AND AUI_FIND_REQUIRED_${_module})
            message(FATAL_ERROR "Component ${_module} is not found")
        else()
            message(STATUS "Component ${_module} is not found")
        endif()
    endif()
endforeach()

if (AUI_FOUND AND NOT TARGET aui)
    add_library(aui INTERFACE IMPORTED)
    set_target_properties(aui PROPERTIES
            INTERFACE_LINK_LIBRARIES "${AUI_IMPORTED_TARGETS}")
endif()

if (UNIX AND NOT APPLE)
    find_package(Threads REQUIRED)
endif()

if (AUI_views_FOUND AND NOT ANDROID AND NOT IOS)
    auib_use_system_libs_begin()
    if (UNIX AND NOT APPLE)
        find_package(X11 REQUIRED)
    endif()
    find_package(OpenGL REQUIRED)
    auib_use_system_libs_end()
endif()

if (AUI_uitests_FOUND AND NOT ANDROID AND NOT IOS)
    find_package(GTest REQUIRED)
endif()
